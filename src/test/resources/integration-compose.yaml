services:
  mailhog:
    image: 'mailhog/mailhog:v1.0.0'
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # HTTP port

  dynamodb:
    image: 'amazon/dynamodb-local'
    command: "-jar DynamoDBLocal.jar -inMemory -sharedDb"
    ports:
      - '8000:8000'
    healthcheck:
      test: ["CMD-SHELL", '[ "$(curl -s -o /dev/null -I -w ''%{http_code}'' http://localhost:8000)" == "400" ]']
      interval: 2s
      timeout: 5s
      retries: 5

  aws-cli:
    image: 'amazon/aws-cli'
    user: root
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
    volumes:
      - ../../../docker/dynamodb-init-script.sh:/scripts/dynamodb-init-script.sh
    entrypoint: ['bash']
    command: ["/scripts/dynamodb-init-script.sh"]
    depends_on:
      dynamodb:
        condition: service_healthy

  kafka:
    image: apache/kafka:3.8.0
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9092,CONTROLLER://kafka:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
    healthcheck:
      test: bash /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic new-orders
      interval: 2s
      timeout: 6s
      retries: 3

  mongodb:
    image: mongo:8.0.0
    command: ["--replSet", "mongo", "--bind_ip_all", "--port", "27017"]
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'mongo',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 2s
      timeout: 6s
      retries: 3

  cart-service:
    image: seller-sphere/cart-service:latest
    ports:
      - "8002:8002"
    environment:
      DYNAMODB_URL: http://dynamodb:8000
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      JWT_SECRET: ${JWT_SECRET}

  user-service:
    image: seller-sphere/user-service:latest
    ports:
      - "8001:8080"
    environment:
      DYNAMODB_URL: ${DYNAMODB_URL}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      JWT_SECRET: ${JWT_SECRET}
      MAIL_HOST: mailhog
      MAIL_PORT: 1025

  product-service:
    image: seller-sphere/product-service:latest
    ports:
      - "8003:8080"
    environment:
      MONGO_URL: ${MONGO_URL}

  order-service:
    image: seller-sphere/order-service:latest
    ports:
      - "8004:8080"
    environment:
      MONGO_URL: ${MONGO_URL}
      DYNAMODB_URL: ${DYNAMODB_URL}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      JWT_SECRET: ${JWT_SECRET}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      KAFKA_TOPIC: 'new-orders'